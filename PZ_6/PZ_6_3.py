import random
'''21 Вариант Скляров'''
'''Постановка задачи..............
   Дано множество A из N точек на плоскости и точка B (точки заданы своими
    координатами х, у). Найти точку из множества A, наиболее близкую к точке B.
    Расстояние R между точками с координатами (x1, y1) и (x2, у2) вычисляется по
    формуле:
    R = √(x2 – x1)2 + (у2 – y1)2
    .
    Для хранения данных о каждом наборе точек следует использовать по два списка: первый
    список для хранения абсцисс, второй — для хранения ординат.'''

def rasstoyanie(x1, x2, y1, y2): ###Функция которая принимает 4 параметра.
    R = (x2 - x1) + (y2 - y1)    ###Формула по которой находится расстояние
    list_2.append(R)
    print(list_2)
try:    ###Блок обработчика исключений, в нём выполняется код, без ошибок
    B = []      ### Переменная B ссылается на пустой список
    c = int(input('Введите размер списка: '))   ### В переменную c записываются вводимое значение пользователем в int
    list_2 = []
    list_x = [random.randint(0, 100) for a in range(c)]  ### Создание списка в котором генерируется рандомное количество
    list_y = [random.randint(0, 100) for a in range(c)]
    a, b = int(input('Введите x координату для точки B: ')), int(input('Введите y координату для точки B: '))
    B.append(a)  ###Добавление в список значения переменной a - это x координата.
    B.append(b)  ###Добавление в список значения переменной b - это y координата.
    print(list_x, list_y)
except ValueError:
    print("Ошибка")
else: ### Условие иначе, где выполняется продолжение блока try
    print('Количество всех точке по y в массиве A:', list_y) ### Вывод списка ordinati в котором хрантся все y
    print('Количество всех точке по x в массиве A:', list_x) ### Вывод списка abscisya в котором хрантся все x
    A = list_x + list_y
    print('Массив A: ', A) ### Вывод всего списка A
    print(f'Координаты точки B: x->{B[0]}, y->{B[1]}') ### Вывод координаты точки в списке B, x и y.
    i = 0

    while i <= c - 1:
        rasstoyanie(list_x[i-1], list_x[i-1+1], list_y[i-1], list_y[i-1+1])
        print(list_x[i-1], list_x[i-1+1], list_y[i-1], list_y[i-1+1])
        i += 1
    print(min(list_2))